
#include "ServerApplication.h"
#include "../MuteNet/Link.h"
#include "../MuteNet/EngineIO.h"


const std::string inputData =
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000";

using namespace Network;

ServerApplication::ServerApplication()
{
	_acceptor = std::make_unique<Network::Acceptor>();
	_service = std::make_unique<Network::IOService>();
	_timepoint = std::chrono::high_resolution_clock::now();

	EngineIO::OnAccepted = [&](const Network::LinkPtr& Ptr)
	{
		OnAccepted(Ptr);
	};

	EngineIO::OnRecived = [&](const Network::LinkPtr& Ptr, std::shared_ptr<Util::InputMemoryStream> buffer)
	{
		OnRecived(Ptr, buffer);
	};

	EngineIO::OnSended = [&](const Network::LinkPtr& Ptr, size_t SendedSize)
	{
		OnSended(Ptr, SendedSize);
	};
}

bool ServerApplication::Open()
{
	if (!_service->Initialize(8, INFINITE))
		return false;

	if (!_acceptor->Initialize(_service.get(),
		"127.0.0.1", 25000))
	{
		std::cout << WSAGetLastError() << std::endl;
		return false;
	}

	if (!_acceptor->Open())
		return false;

	return true;
}

void ServerApplication::OnAccepted(const Network::LinkPtr& link)
{
	auto Packet = std::make_shared<Util::OutputMemoryStream>();
	Packet->Serialize((void *)inputData.c_str(), inputData.length());

	link->SendPacket(Packet);
}

void ServerApplication::OnRecived(const Network::LinkPtr& link, std::shared_ptr<Util::InputMemoryStream>& recvPacket)
{
	char buf[1949];
	
	recvBytes += recvPacket->GetRemainingDataSize();
	recvPacket->Serialize(buf, inputData.length());

	if (strncmp(buf, inputData.c_str(), inputData.length()) != 0)
		throw;

	auto Packet = std::make_shared<Util::OutputMemoryStream>();
	Packet->Serialize((void *)inputData.c_str(), inputData.length());
	link->SendPacket(Packet);
}

void ServerApplication::OnSended(const Network::LinkPtr& link, size_t SendedSize)
{
	sendBytes += SendedSize;
}

void ServerApplication::Monitoring()
{
	std::cout << "Send Bytes : " << sendBytes << std::endl;
	std::cout << "Recv Bytes : " << recvBytes << std::endl;
	std::cout << "Running Time : " << std::chrono::duration<double>(std::chrono::steady_clock::now() - _timepoint).count() << std::endl;

	sendBytes = recvBytes = 0;
}
