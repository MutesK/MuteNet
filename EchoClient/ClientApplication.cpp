#include "ClientApplication.h"
#include "../MuteNet/Link.h"

using namespace Network;

const std::string inputData =
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000"
"HELLO_UNITTEST000000000000000000000000000000000000000000000";

ClientApplication::ClientApplication()
{
	_Service = std::make_unique<Network::IOService>();
	_Connector = std::make_unique<Network::Connector>();
	_timepoint = std::chrono::high_resolution_clock::now();

	EngineIO::OnConnected = [&](const Network::LinkPtr& LinkPtr)
	{
		OnConnected(LinkPtr);
	};

	EngineIO::OnRecived = [&](const Network::LinkPtr& LinkPtr, std::shared_ptr<Util::InputMemoryStream>& Stream)
	{
		OnRecived(LinkPtr, Stream);
	};

	EngineIO::OnSended = std::bind(&ClientApplication::OnSended, this, std::placeholders::_1, std::placeholders::_2);
}

bool ClientApplication::Open()
{
	if (!_Service->Initialize(1, INFINITE))
		return false;

	if (!_Connector->Initialize(_Service.get(), "127.0.0.1", 25000))
		return false;

	if (!_Connector->Connect())
		return false;

	return true;
}

void ClientApplication::Monitoring()
{
	std::cout << "Send Bytes : " << sendBytes << std::endl;
	std::cout << "Recv Bytes : " << recvBytes << std::endl;
	std::cout << "Running Time : " << std::chrono::duration<double>(std::chrono::steady_clock::now() - _timepoint).count() << std::endl;
	sendBytes = recvBytes = 0;
}

void ClientApplication::OnConnected(const Network::LinkPtr& link)
{
	std::cout << "Connected !!!! \n";
}

void ClientApplication::OnRecived(const Network::LinkPtr& link, std::shared_ptr<Util::InputMemoryStream>& recvPacket)
{
	recvBytes += recvPacket->GetRemainingDataSize();

	auto Packet = std::make_shared<Util::OutputMemoryStream>();
	Packet->Serialize((void*)inputData.c_str(), inputData.length());
	link->SendPacket(Packet);
}

void ClientApplication::OnSended(const Network::LinkPtr&, size_t SendedSize)
{
	sendBytes += SendedSize;
}